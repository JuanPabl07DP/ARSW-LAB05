1. IDENTIFICACIÓN DE CONDICIONES DE CARRERA Y REGIONES CRÍTICAS

1.1 Condiciones de Carrera Identificadas:

a) En operaciones de escritura/lectura sobre blueprints:
   - Múltiples hilos intentando agregar/actualizar el mismo plano simultáneamente
   - Un hilo leyendo mientras otro actualiza el mismo plano

b) En operaciones de consulta por autor:
   - Iteración sobre la colección mientras otros hilos modifican los planos

1.2 Regiones Críticas:

a) En InMemoryBlueprintPersistence:
   - El mapa 'blueprints' donde se almacenan los planos
   - Métodos que modifican el mapa (saveBlueprint, updateBlueprint)
   - Métodos que leen del mapa (getBlueprint, getBlueprintsByAuthor)

2. SOLUCIÓN IMPLEMENTADA

2.1 Estrategia Principal: Uso de ConcurrentHashMap

Se reemplazó HashMap por ConcurrentHashMap porque:
- Proporciona operaciones atómicas thread-safe
- Permite múltiples lecturas concurrentes
- Mejor rendimiento que la sincronización global
- Maneja internamente la concurrencia a nivel de segmento